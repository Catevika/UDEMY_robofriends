{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CounterButton","count","updateCount","bind","nextProps","nextState","console","log","color","onClick","PureComponent","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Cardlist","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7f43d024.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\t// console.log('Cardlist');\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tid={robots[i].id}\r\n\t\t\t\t\t\tname={robots[i].name}\r\n\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Searchbox = ({ searchfield, searchChange }) => {\r\n\t// console.log('Searchbox');\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='searchbar'\r\n\t\t\t\tplaceholder='Search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\toverflowY: 'scroll',\r\n\t\t\t\tborder: '1px solid black',\r\n\t\t\t\theight: '450px'\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Ooops... That's not good</h1>;\r\n\t\t} else {\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { PureComponent } from 'react';\r\n\r\nexport class CounterButton extends PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcount: 0\r\n\t\t};\r\n\t\tthis.updateCount = this.updateCount.bind(this);\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.state.count !== nextState.count) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tupdateCount() {\r\n\t\tthis.setState(state => {\r\n\t\t\treturn { count: state.count + 1 };\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('CounterButton');\r\n\t\treturn (\r\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\r\n\t\t\t\tCount: {this.state.count}{' '}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component, Fragment } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nexport class Header extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender() {\r\n\t\t// console.log('Header');\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<h1 className='f2'>Robofriends</h1>;\r\n\t\t\t\t<CounterButton color={'red'} />\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t};\r\n};\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\r\n\t\treturn isPending ? (\r\n\t\t\t<h1>Loading...</h1>\r\n\t\t) : (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<Searchbox searchChange={onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<Cardlist robots={filteredRobots} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(App);\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = text => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn { ...state, action, searchField: action.payload };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn { ...state, action, isPending: true };\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\taction,\r\n\t\t\t\trobots: action.payload,\r\n\t\t\t\tisPending: false\r\n\t\t\t};\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\taction,\r\n\t\t\t\terror: action.payload,\r\n\t\t\t\tisPending: false\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { logger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport App from './containers/App';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tcomposeWithDevTools(applyMiddleware(thunkMiddleware, logger))\r\n);\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your Card to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}